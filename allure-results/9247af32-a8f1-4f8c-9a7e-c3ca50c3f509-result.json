{"name": "test_successful_login_with_valid_credentials", "status": "broken", "statusDetails": {"message": "playwright._impl._errors.TimeoutError: Page.fill: Timeout 30000ms exceeded.\nCall log:\nwaiting for locator(\"input[name=\\\"email\\\"]\")", "trace": "fixturefunc = <function enter_valid_credentials at 0x000001C3054FB1A0>\nrequest = <FixtureRequest for <Function test_successful_login_with_valid_credentials>>, kwargs = {'page': <Page url='https://www.amazon.com/ap/signin'>}\n\n    def call_fixture_func(\n        fixturefunc: _FixtureFunc[FixtureValue], request: FixtureRequest, kwargs\n    ) -> FixtureValue:\n        if is_generator(fixturefunc):\n            fixturefunc = cast(\n                Callable[..., Generator[FixtureValue, None, None]], fixturefunc\n            )\n            generator = fixturefunc(**kwargs)\n            try:\n                fixture_result = next(generator)\n            except StopIteration:\n                raise ValueError(f\"{request.fixturename} did not yield a value\") from None\n            finalizer = functools.partial(_teardown_yield_fixture, fixturefunc, generator)\n            request.addfinalizer(finalizer)\n        else:\n            fixturefunc = cast(Callable[..., FixtureValue], fixturefunc)\n>           fixture_result = fixturefunc(**kwargs)\n\nC:\\Python312\\Lib\\site-packages\\_pytest\\fixtures.py:898: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \nsteps\\test_amazon_login.py:14: in enter_valid_credentials\n    page.fill('input[name=\"email\"]', 'valid-email@example.com')\nC:\\Python312\\Lib\\site-packages\\playwright\\sync_api\\_generated.py:9888: in fill\n    self._sync(\nC:\\Python312\\Lib\\site-packages\\playwright\\_impl\\_page.py:816: in fill\n    return await self._main_frame.fill(**locals_to_params(locals()))\nC:\\Python312\\Lib\\site-packages\\playwright\\_impl\\_frame.py:527: in fill\n    await self._channel.send(\"fill\", locals_to_params(locals()))\nC:\\Python312\\Lib\\site-packages\\playwright\\_impl\\_connection.py:59: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x000001C30550F350>, cb = <function Channel.send.<locals>.<lambda> at 0x000001C305BC2CA0>\nis_internal = False\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(task, \"__pw_stack__\", inspect.stack())\n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TimeoutError: Page.fill: Timeout 30000ms exceeded.\nE           Call log:\nE           waiting for locator(\"input[name=\\\"email\\\"]\")\n\nC:\\Python312\\Lib\\site-packages\\playwright\\_impl\\_connection.py:514: TimeoutError"}, "description": "F:\\TRAININGS-RECORDING-ALL\\SANJEEV-PYTEST\\tests\\features\\amazon_login.feature: Successful login with valid credentials", "start": 1727346025435, "stop": 1727346065337, "uuid": "8b988bfa-c27b-4274-ba86-1320ad533069", "historyId": "8cea279e65bc9ec24ec64df939960fe3", "testCaseId": "8cea279e65bc9ec24ec64df939960fe3", "fullName": "steps.test_amazon_login#test_successful_login_with_valid_credentials", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures"}, {"name": "parentSuite", "value": "steps"}, {"name": "suite", "value": "test_amazon_login"}, {"name": "host", "value": "AJAYBONGANI"}, {"name": "thread", "value": "16568-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "steps.test_amazon_login"}]}